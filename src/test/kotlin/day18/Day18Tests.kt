package day18

import io.kotest.matchers.shouldBe
import org.junit.jupiter.api.Test

class Day18Tests {

    @Test
    fun `index of exploding pair`() {
        sfn("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]").indexOfExplodingPair()
            .shouldBe(24)
    }

    @Test
    fun `a pair explodes`() {
        sfn("[[[[[9,8],1],2],3],4]").explode()
            .shouldBe(sfn("[[[[0,9],2],3],4]"))

        sfn("[7,[6,[5,[4,[3,2]]]]]").explode()
            .shouldBe(sfn("[7,[6,[5,[7,0]]]]"))

        sfn("[[6,[5,[4,[3,2]]]],1]").explode()
            .shouldBe(sfn("[[6,[5,[7,0]]],3]"))

        sfn("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]").explode()
            .shouldBe(sfn("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]"))

        sfn("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]").explode()
            .shouldBe(sfn("[[3,[2,[8,0]]],[9,[5,[7,0]]]]"))
    }

    @Test
    fun `a number is split`() {
        sfn("[[[[0,7],4],[15,[0,13]]],[1,1]]").split()
            .shouldBe(sfn("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]"))

        sfn("[[[[0,7],4],[[7,8],[0,13]]],[1,1]]").split()
            .shouldBe(sfn("[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]"))
    }

    @Test
    fun `reduce a number`() {
        sfn("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]").reduce()
            .shouldBe(sfn("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"))
    }

    @Test
    fun `add to numbers`() {
        (sfn("[[[[4,3],4],4],[7,[[8,4],9]]]") + sfn("[1,1]"))
            .shouldBe(sfn("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"))

        (sfn("[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]") + sfn("[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]"))
            .shouldBe(sfn("[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]"))

        (sfn("[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]") + sfn("[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]"))
            .shouldBe(sfn("[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]"))
    }

    @Test
    fun `sum of numbers`() {
        val numbers = """
            [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
            [7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
            [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
            [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
            [7,[5,[[3,8],[1,4]]]]
            [[2,[2,2]],[8,[8,1]]]
            [2,9]
            [1,[[[9,3],9],[[9,0],[0,7]]]]
            [[[5,[7,4]],7],1]
            [[[[4,2],2],6],[8,7]]
        """.trimIndent().lines().map(::sfn)

        numbers.sum() shouldBe sfn("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")
    }

    @Test
    internal fun `magnitude of a number`() {
        sfn("[[1,2],[[3,4],5]]").magnitude shouldBe 143

        sfn("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]").magnitude shouldBe 3488
    }

    @Test
    fun `solve first puzzle with sample`() {
        val input = sample.lineSequence()

        solvePuzzle1(input) shouldBe 4140
    }

    @Test
    fun `solve second puzzle with sample`() {
        val input = sample.lineSequence()

        solvePuzzle2(input) shouldBe 3993
    }

    private val sample = """
        [[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
        [[[5,[2,8]],4],[5,[[9,9],0]]]
        [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
        [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
        [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
        [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
        [[[[5,4],[7,7]],8],[[8,3],8]]
        [[9,3],[[9,9],[6,[4,9]]]]
        [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
        [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]
    """.trimIndent()
}
